------------------------------------------------------------------------------

README File for USB7x02 SPI Programming/Bridging Example for Linux
Author: Shiva Balasubramanian <shiva.balasubramanian@microchip.com>
        Application Engineer - Microchip Technology Inc.

------------------------------------------------------------------------------

Table of Contents:
-----------------
1) Introduction
2) Pre-requisites
3) Getting Started
4) Building and Executing
5) Troubleshooting
6) License

------------------------------------------------------------------------------

1) Introduction
===============

This application is meant for programming the external SPI flash of a USB7x02
series of USB hubs. The tool also supports a limited number of SPI Bridging
commands. This application makes use of libusb APIs to perform low level
SPI pass-through transfer read/writes. The features supported are as follows:

    (i) Programming the SPI flash with a binary file
    (ii) Reading the contents of the flash into a binary file.
    (iii)Safe boot from Internal ROM in case of operation failure.
    (iv) SPI pass-through read and write.

NOTE: This example was developed to work with Microchip/SST flash only. It has
not been tested with other third-party flash memories. Using it with a third-
party flash may produce unpredicatable results.

------------------------------------------------------------------------------

2)Pre-requisites
===============

(i) Software:
    ----------
   Linux OS
   libusb 1.0
   MPLABConnect.a

(ii) Hardware:
    ----------
	USB7x02.
	USB2.0 host controller.

------------------------------------------------------------------------------

3) Getting Started
==================

Prior to running this application, connect the USBx02 series hub to the host and
ensure that it is enumerated.
Connect the hub to the usb port and check whether it has enumerated properly.
This can be checked by using

    $ lsusb

    Bus 002 Device 002: ID 8087:0024 Intel Corp. Integrated Rate Matching Hub
    Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
    Bus 006 Device 080: ID 0424:7002 Standard Microsystems Corp.
    Bus 006 Device 002: ID 2109:0812 VIA Labs, Inc. VL812 Hub
    Bus 006 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
    Bus 005 Device 101: ID 0424:7040 Standard Microsystems Corp.
    Bus 005 Device 100: ID 0424:4002 Standard Microsystems Corp.
    Bus 005 Device 003: ID 2109:2812 VIA Labs, Inc. VL812 Hub
    Bus 005 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
    Bus 001 Device 004: ID 413c:2002 Dell Computer Corp. SK-8125 Keyboard
    Bus 001 Device 003: ID 413c:1002 Dell Computer Corp. Keyboard Hub

 0424 is Vendor ID(VID) for Microchip(SMSC) hubs. On successful USB7x02
 enumeration, you will see 3 devices on the bus: a USB3.x hub (PID:7002)
 USB2.0 hub(PID:4002) and the Hub feature controller.(PID: 7040).

 This application will use the USB2.0 instance of the hub for all SPI programming
 and bridging operations.

------------------------------------------------------------------------------

4) Building and Executing
==========================

(i) Firstly, ensure that you have root access privileges on the machine you are
using. If not, run the following command:

    $ sudo su

You will be prompted for the login password.

(ii) In order to clean and build the application, navigate to the MPLABConnect
directory and execute the following commands.

    $ make clean

    rm -f *.o
    rm -f *.a
    rm -f Makefile.bak

    $ make

    =============
    Compiling MchpUSBInterface.cpp
    =============
    Compiling USBHubAbstraction.cpp
    =============
    Creating MPLABConnect.a

(iii) Copy the newly created MPLABConnect.a file to the SPI_Bridging directory
using the following command.

    $ cp MPLABConnect.a ../SPI_Bridging

(iv) Navigate to the SPI_Bridging directory and execute a clean and build using
the commands in step (ii).

    $ make clean

    rm -rf ./obj
    rm -rf ./out
    rm -f Makefile.bak

    $ make

    =============
    Compiling spi_bridging.cpp
    =============
    Creating spiBridging

(v) On a successful build, you should see a folder titled 'out' which shall
have the executable file 'spiBridging'. Navigate to the out folder to execute.


    $cd out

(vi) In order to see the list of supported operations and the command line
arguments, execute with --help flag.


    $ ./spiBridging --help
    Operation : Write
    Usage: ./spiBridging VID(Hex) PID(Hex) DevicePath(String) Operation(0x01) FirmwareFile
    Example: ./spiBridging 0x424 0x4002 "1:2" 0x01 USB7x02_SILICON_SPI_V1.27.bin

    Operation : Read
    Usage: ./spiBridging VID(Hex) PID(Hex) DevicePath(String) Operation(0x00) FirmwareFile
    Example: ./spiBridging 0x424 0x4002 "1:2" 0x00 flash_dump.bin

    Operation : Transfer
    Usage: ./spiBridging VID(Hex) PID(Hex) DevicePath(String) Operation(0x03) Direction(R/W: 1/0) Command DataLength TotalLength
    Example: ./spiBridging 0x0424 0x4002 "1:2" 0x02 0 0x9f 1 4
    Example: ./spiBridging 0x0424 0x4002 "1:2" 0x02 1 0x9f 1 4

------------------------------------------------------------------------------

5) Troubleshooting
==================

In case of failure, you can enable the DEBUG option to see debug logs in the
console during execution. This can be done by un-commenting the following
statment in the file MchpUSBInterface.h file:

    Line 68: #define DEBUG

Re-compile the application and run it again to see the debug log in the console.
Since a lot of messages are generated during debug, it is advisable to divert the
console output to a text file. This can be done as follows:

    $ ./spiBridging 0x424 0x4002 "3:4" 0x00 ../../mem.bin > debug_log.txt

In case of verification failure during programming, the data read from the flash
for verification will stored in a file "flash_verify_fail.bin" at
..SPI_Bridging/out , if the executable was compiled with the debug option enabled.

6) License
==========
**********************************************************************************
* Â©  [2018] Microchip Technology Inc. and its subsidiaries.
* Subject to your compliance with these terms, you may use Microchip software and
* any derivatives exclusively with Microchip products. It is your responsibility
* to comply with third party license terms applicable to your use of third party
* software (including open source software) that may accompany Microchip software.

* THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS".  NO WARRANTIES, WHETHER EXPRESS,
* IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED WARRANTIES
* OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE. IN
* NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
* INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
* WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS BEEN
* ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE.  TO THE FULLEST
* EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN ANY WAY
* RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY, THAT YOU
* HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.

------------------------------------------------------------------------------
